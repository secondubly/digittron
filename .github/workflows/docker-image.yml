name: Docker Image CI

on:
    push:
        branches: ['main']

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build:
        runs-on: self-hosted
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Create .env file
              run: |
                  echo "CLIENT_ID=\"${{ vars.CLIENT_ID }}\"" > .env
                  echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" > .env
                  echo "BOT_ID=${{ vars.BOT_ID }}" >> .env
                  echo "BOT_ACCESS_TOKEN=${{ secrets.BOT_ACCESS_TOKEN }}" >> .env
                  echo "BOT_REFRESH_TOKEN=${{ secrets.BOT_REFRESH_TOKEN }}" >> .env
                  echo "TWITCH_ID=${{ vars.TWITCH_ID }}" >> .env
                  echo "TWITCH_ACCESS_TOKEN=${{ secrets.TWITCH_ACCESS_TOKEN }}" >> .env
                  echo "TWITCH_REFRESH_TOKEN=${{ secrets.TWITCH_REFRESH_TOKEN }}" >> .env
                  echo "REDIS_HOST='redis'" >> .env
                  echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
              shell: powershell

            - name: Verify .env file
              run: type .env
              shell: powershell

            - name: Build image
              run: docker compose build
              shell: powershell

            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.G_TOKEN }}

            - name: Push image to Github Container Registry
              run: docker compose push
              shell: powershell

            # - name: Extract metadata (tags, labels) for Docker
            #   id: meta
            #   uses: docker/metadata-action@v5
            #   with:
            #       images: ghcr.io/${{ github.repository }}
            #       tags: |
            #           type=semver,pattern={{version}} # Tag with release version
            #           type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.action == 'published' }}

            # - name: Generate artifact attestation
            #   uses: actions/attest-build-provenance@v3
            #   with:
            #       subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
            #       subject-digest: ${{ steps.push.outputs.digest }}
            #       push-to-registry: true
